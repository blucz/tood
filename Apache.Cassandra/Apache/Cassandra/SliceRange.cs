/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Cassandra
{

  [Serializable]
  public partial class SliceRange : TBase
  {
    private byte[] _start;
    private byte[] _finish;
    private bool _reversed;
    private int _count;

    public byte[] Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public byte[] Finish
    {
      get
      {
        return _finish;
      }
      set
      {
        __isset.finish = true;
        this._finish = value;
      }
    }

    public bool Reversed
    {
      get
      {
        return _reversed;
      }
      set
      {
        __isset.reversed = true;
        this._reversed = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool start;
      public bool finish;
      public bool reversed;
      public bool count;
    }

    public SliceRange() {
      this._reversed = false;
      this._count = 100;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Start = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Finish = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Reversed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SliceRange");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Start != null && __isset.start) {
        field.Name = "start";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Start);
        oprot.WriteFieldEnd();
      }
      if (Finish != null && __isset.finish) {
        field.Name = "finish";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Finish);
        oprot.WriteFieldEnd();
      }
      if (__isset.reversed) {
        field.Name = "reversed";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Reversed);
        oprot.WriteFieldEnd();
      }
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SliceRange(");
      sb.Append("Start: ");
      sb.Append(Start);
      sb.Append(",Finish: ");
      sb.Append(Finish);
      sb.Append(",Reversed: ");
      sb.Append(Reversed);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
